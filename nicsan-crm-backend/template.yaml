AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Nicsan CRM PDF Processing Lambda

Parameters:
  S3BucketName:
    Type: String
    Default: nicsan-crm-pdfs
    Description: S3 bucket name for PDF uploads
  
  APIEndpoint:
    Type: String
    Default: http://localhost:3001
    Description: API endpoint for internal communication
  
  InternalToken:
    Type: String
    NoEcho: true
    Description: Internal token for Lambda-API communication

Globals:
  Function:
    Timeout: 300
    Runtime: nodejs18.x
    Environment:
      Variables:
        AWS_REGION: !Ref AWS::Region
        API_ENDPOINT: !Ref APIEndpoint
        INTERNAL_TOKEN: !Ref InternalToken

Resources:
  # PDF Processing Lambda Function
  PDFProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: nicsan-crm-pdf-processor
      CodeUri: lambda/
      Handler: pdf-processor.handler
      Description: Processes PDF uploads with Textract
      MemorySize: 512
      Timeout: 300
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
        - TextractFullAccessPolicy: {}
        - CloudWatchLogsFullAccessPolicy: {}
      Events:
        S3ObjectCreated:
          Type: S3
          Properties:
            Bucket: !Ref S3Bucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
                  - Name: suffix
                    Value: .pdf

  # S3 Bucket for PDF uploads
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldPDFs
            Status: Enabled
            ExpirationInDays: 1
            Filter:
              Prefix: uploads/
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt PDFProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
                  - Name: suffix
                    Value: .pdf

  # Lambda Permission for S3
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PDFProcessorFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3Bucket.Arn

  # IAM Role for Lambda (if needed)
  PDFProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
      Policies:
        - PolicyName: PDFProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${S3Bucket.Arn}/*'
                  - !GetAtt S3Bucket.Arn
              - Effect: Allow
                Action:
                  - textract:StartDocumentAnalysis
                  - textract:GetDocumentAnalysis
                  - textract:AnalyzeDocument
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

Outputs:
  PDFProcessorFunctionArn:
    Description: ARN of the PDF Processor Lambda function
    Value: !GetAtt PDFProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-PDFProcessorFunctionArn'
  
  S3BucketName:
    Description: Name of the S3 bucket for PDF uploads
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'
  
  S3BucketArn:
    Description: ARN of the S3 bucket for PDF uploads
    Value: !GetAtt S3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'



